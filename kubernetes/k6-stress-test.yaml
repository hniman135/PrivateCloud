---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-test-script
  namespace: crt-20521594-dev
data:
  test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Counter, Rate, Trend } from 'k6/metrics';

    // Custom metrics
    let successRate = new Rate('success_rate');
    let latency = new Trend('latency', true);
    let requestCount = new Counter('request_count');

    // Test configuration
    export let options = {
      stages: [
        { duration: '30s', target: 10 },   // Warm up to 10 VUs
        { duration: '1m', target: 50 },    // Ramp to 50 VUs
        { duration: '2m', target: 100 },   // Peak at 100 VUs
        { duration: '1m', target: 50 },    // Scale down
        { duration: '30s', target: 0 },    // Cool down
      ],
      thresholds: {
        'http_req_duration': ['p(95)<100', 'p(99)<200'],  // 95% < 100ms, 99% < 200ms
        'http_req_failed': ['rate<0.01'],                  // Error rate < 1%
        'success_rate': ['rate>0.99'],                     // Success rate > 99%
      },
    };

    const BASE_URL = 'http://fastapi-service:8000';

    export default function () {
      // Test 1: Root endpoint
      let res1 = http.get(`${BASE_URL}/`);
      check(res1, {
        'root status is 200': (r) => r.status === 200,
        'root has message': (r) => r.json('message') !== undefined,
      }) && successRate.add(1) || successRate.add(0);
      latency.add(res1.timings.duration);
      requestCount.add(1);

      // Test 2: Health check
      let res2 = http.get(`${BASE_URL}/health/live`);
      check(res2, {
        'health status is 200': (r) => r.status === 200,
      }) && successRate.add(1) || successRate.add(0);
      requestCount.add(1);

      // Test 3: Database endpoint
      let res3 = http.get(`${BASE_URL}/users/`);
      check(res3, {
        'users status is 200': (r) => r.status === 200,
      }) && successRate.add(1) || successRate.add(0);
      requestCount.add(1);

      sleep(0.1); // Small delay between iterations
    }

    export function handleSummary(data) {
      return {
        'stdout': textSummary(data, { indent: ' ', enableColors: true }),
      };
    }

    function textSummary(data, options) {
      let summary = '\n';
      summary += '================== K6 STRESS TEST RESULTS ==================\n\n';
      
      summary += `Total Duration: ${data.state.testRunDurationMs / 1000}s\n`;
      summary += `Total Requests: ${data.metrics.http_reqs.values.count}\n`;
      summary += `Requests/sec: ${data.metrics.http_reqs.values.rate.toFixed(2)}\n`;
      summary += `Failed Requests: ${data.metrics.http_req_failed.values.passes || 0}\n`;
      summary += `Error Rate: ${(data.metrics.http_req_failed.values.rate * 100).toFixed(2)}%\n\n`;
      
      summary += '--- HTTP Request Duration ---\n';
      summary += `  Min: ${data.metrics.http_req_duration.values.min.toFixed(2)}ms\n`;
      summary += `  Avg: ${data.metrics.http_req_duration.values.avg.toFixed(2)}ms\n`;
      summary += `  Med: ${data.metrics.http_req_duration.values.med.toFixed(2)}ms\n`;
      summary += `  P90: ${data.metrics.http_req_duration.values['p(90)'].toFixed(2)}ms\n`;
      summary += `  P95: ${data.metrics.http_req_duration.values['p(95)'].toFixed(2)}ms\n`;
      summary += `  P99: ${data.metrics.http_req_duration.values['p(99)'].toFixed(2)}ms\n`;
      summary += `  Max: ${data.metrics.http_req_duration.values.max.toFixed(2)}ms\n\n`;
      
      summary += '--- Virtual Users ---\n';
      summary += `  Peak VUs: ${data.metrics.vus_max.values.max}\n`;
      summary += `  Avg VUs: ${data.metrics.vus.values.value.toFixed(0)}\n\n`;
      
      summary += '--- Custom Metrics ---\n';
      if (data.metrics.success_rate) {
        summary += `  Success Rate: ${(data.metrics.success_rate.values.rate * 100).toFixed(2)}%\n`;
      }
      if (data.metrics.request_count) {
        summary += `  Total Custom Requests: ${data.metrics.request_count.values.count}\n`;
      }
      
      summary += '\n============================================================\n';
      
      return summary;
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: k6-stress-test
  namespace: crt-20521594-dev
spec:
  ttlSecondsAfterFinished: 600  # Auto cleanup after 10 minutes
  backoffLimit: 0  # Don't retry on failure
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: k6
        image: grafana/k6:latest
        command: ['k6', 'run', '/scripts/test.js']
        volumeMounts:
        - name: k6-script
          mountPath: /scripts
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
      volumes:
      - name: k6-script
        configMap:
          name: k6-test-script

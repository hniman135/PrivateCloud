apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-app
  namespace: crt-20521594-dev
spec:
  replicas: 1  # Will be managed by HPA
  selector:
    matchLabels:
      app: fastapi-app
  template:
    metadata:
      labels:
        app: fastapi-app
    spec:
      initContainers:
      - name: wait-for-db
        image: registry.redhat.io/rhel8/postgresql-13:latest
        command: ['sh', '-c']
        args:
          - |
            until pg_isready -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            done
            echo "PostgreSQL is ready!"
        env:
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: DATABASE_PORT
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: fastapi-secret
              key: DATABASE_USER
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: fastapi-secret
              key: DATABASE_PASSWORD
      containers:
      - name: fastapi
        image: image-registry.openshift-image-registry.svc:5000/crt-20521594-dev/fastapi-app:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: fastapi-secret
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fastapi-secret
              key: DATABASE_PASSWORD
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: fastapi-secret
              key: SECRET_KEY
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: LOG_LEVEL
        - name: WORKERS_PER_CORE
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: WORKERS_PER_CORE
        - name: MAX_WORKERS
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: MAX_WORKERS
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: fastapi-config
              key: PORT
        command: ["/bin/sh", "-c"]
        args:
        - |
          # For I/O-bound async applications, use more workers
          WEB_CONCURRENCY=$(( $(nproc) * 4 ))
          if [ $WEB_CONCURRENCY -gt $MAX_WORKERS ]; then WEB_CONCURRENCY=$MAX_WORKERS; fi
          export WEB_CONCURRENCY
          # Optimized gunicorn config for async FastAPI
          gunicorn main:app \
            --workers $WEB_CONCURRENCY \
            --worker-class uvicorn.workers.UvicornWorker \
            --worker-connections 1000 \
            --timeout 120 \
            --keep-alive 5 \
            --max-requests 1000 \
            --max-requests-jitter 50 \
            --bind $HOST:$PORT
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 1
          # failureThreshold: 3
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 1Gi